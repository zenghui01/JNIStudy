apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'android-aspectjx'

println "test"

println "${rootProject.ext.kotlin_version}"

def androidId = rootProject.ext.androidVersion
def url = rootProject.ext.url
def dependencieImpl = rootProject.ext.dependencieImpl

android {
    compileSdkVersion androidId.compileSdkVersion
    buildToolsVersion androidId.buildToolsVersion
    defaultConfig {
        applicationId androidId.applicationId
        minSdkVersion androidId.minSdkVersion
        targetSdkVersion androidId.targetSdkVersion
        versionCode androidId.versionCode
        versionName androidId.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //开启分包
        multiDexEnabled true
        //设置分包配置
        //multiDexKeepFile file("multidex_config.txt")

        //将svg图片生成指定维度的png图片
        //vectorDrawables.generatedDensities('xhdpi', 'xxhdpi')

        //使用support-v7兼容(5.0以上)
        vectorDrawables.useSupportLibrary = true

        //只保留指定资源
        resConfigs('zh-rCN')


        externalNativeBuild {
            cmake {
                cppFlags ""
                abiFilters "armeabi-v7a" //指定目标生成so(该过滤只会影响自己写的lib的生成,生成apk中只会生成指定so,但不会删除原有的第三方so)
            }
        }
        ndk {
            abiFilters("armeabi-v7a")//过滤第三方so库(该过滤会影响到第三方so,让生成的apk中只存在指定过滤so库)
        }
    }


    // 签名配置（隐形坑：必须写在buildTypes之前）
//    signingConfigs {
//        debug {
    // 签名证书文件
//            storeFile file('test.jks')
//            // 签名证书的类型
//            storeType "netease"
//            // 签名证书文件的密码
//            storePassword "net163"
//            // 签名证书中密钥别名
//            keyAlias "netease"
//            // 签名证书中该密钥的密码
//            keyPassword "net163"
//            // 是否开启V2打包
//            v2SigningEnabled true
//        }
//        release {
//            // 签名证书文件
//            storeFile file('test.jks')
//            // 签名证书的类型
//            storeType "netease"
//            // 签名证书文件的密码
//            storePassword "net163"
//            // 签名证书中密钥别名
//            keyAlias "netease"
//            // 签名证书中该密钥的密码
//            keyPassword "net163"
//            // 是否开启V2打包
//            v2SigningEnabled true
//        }
//    }

    buildTypes {
        debug {
            buildConfigField("String", "app_url", "${url.debug}")
        }
        release {
            buildConfigField("String", "app_url", "${url.release}")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    // AdbOptions 可以对 adb 操作选项添加配置
    adbOptions {
        // 配置操作超时时间，单位毫秒
        timeOutInMs = 5 * 1000_0

        // adb install 命令的选项配置
        installOptions '-r', '-s'
    }
    // 对 dx 操作的配置，接受一个 DexOptions 类型的闭包，配置由 DexOptions 提供
    dexOptions {
        // 配置执行 dx 命令是为其分配的最大堆内存
        javaMaxHeapSize "4g"
        // 配置是否预执行 dex Libraries 工程，开启后会提高增量构建速度，不过会影响 clean 构建的速度，默认 true
        preDexLibraries = false
        // 配置是否开启 jumbo 模式，代码方法是超过 65535 需要强制开启才能构建成功
        jumboMode true
        // 配置 Gradle 运行 dx 命令时使用的线程数量
        threadCount 8
        // 配置multidex参数
        additionalParameters = [
                '--multi-dex', // 多dex分包
                '--set-max-idx-number=50000', // 每个包内方法数上限
                // '--main-dex-list=' + '/multidex-config.txt', // 打包到主classes.dex的文件列表
                '--minimal-main-dex'
        ]
    }
    // 执行 gradle lint 命令即可运行 lint 检查，默认生成的报告在 outputs/lint-results.html 中
    lintOptions {
        // 遇到 lint 检查错误会终止构建，一般设置为 false
        abortOnError false
        // 将警告当作错误来处理（老版本：warningAsErros）
        warningsAsErrors false
        // 检查新 API
        check 'NewApi'
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets', 'src/main/assets/']
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    kotlinOptions {
        jvmTarget = 1.8
    }
    packagingOptions {
        exclude 'META-INF/kotlinx-io.kotlin_module'
        exclude 'META-INF/atomicfu.kotlin_module'
        exclude 'META-INF/ktor-http.kotlin_module'
        exclude 'META-INF/ktor-utils.kotlin_module'
        exclude 'META-INF/ktor-client-core.kotlin_module'
        exclude 'META-INF/kotlinx-coroutines-io.kotlin_module'
        exclude 'META-INF/kotlinx-coroutines-core.kotlin_module'
    }
    aspectjx {
        enabled true
        exclude 'androidx', 'kotlin', 'com.google', 'com.squareup', 'com.alipay', 'org.apache'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    dependencieImpl.each { k, v ->
        implementation v
    }
}


//
//// 下面都是 AspectJ导入的过程
//// AspectJ 还需要依赖 3
//import org.aspectj.bridge.IMessage
//import org.aspectj.bridge.MessageHandler
//import org.aspectj.tools.ajc.Main
//
//final def log = project.logger
//final def variants = project.android.applicationVariants
//
//variants.all { variant ->
//
//    if (!variant.buildType.isDebuggable()) {
//        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
//        return;
//    }
//
//    JavaCompile javaCompile = variant.javaCompile
//
//    javaCompile.doLast {
//
//        String[] args = ["-showWeaveInfo",
//
//                         "-1.8",
//
//                         "-inpath", javaCompile.destinationDir.toString(),
//
//                         "-aspectpath", javaCompile.classpath.asPath,
//
//                         "-d", javaCompile.destinationDir.toString(),
//
//                         "-classpath", javaCompile.classpath.asPath,
//
//                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
//
//        log.debug "ajc args: " + Arrays.toString(args)
//
//        MessageHandler handler = new MessageHandler(true);
//
//        new Main().run(args, handler);
//
//        for (IMessage message : handler.getMessages(null, true)) {
//
//            switch (message.getKind()) {
//
//                case IMessage.ABORT:
//
//                case IMessage.ERROR:
//
//                case IMessage.FAIL:
//
//                    log.error message.message, message.thrown
//
//                    break;
//
//                case IMessage.WARNING:
//
//                    log.warn message.message, message.thrown
//
//                    break;
//
//                case IMessage.INFO:
//
//                    log.info message.message, message.thrown
//
//                    break;
//
//                case IMessage.DEBUG:
//
//                    log.debug message.message, message.thrown
//
//                    break;
//            }
//        }
//    }
//}

